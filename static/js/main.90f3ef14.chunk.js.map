{"version":3,"sources":["legend.svg","Components/TitleContainer.js","Components/Navbar.jsx","Components/HomeNavContainer.js","Components/HomeStats.js","Pages/HomePage.jsx","Utils/History.js","Backend/APIWrapper.js","Backend/FeedData.js","Components/FeedData.jsx","Components/GraphCard.jsx","Components/SimpleBarGraph.jsx","Components/PieChart.jsx","Pages/GraphPage.jsx","Pages/MostActiveUsers.jsx","Pages/MostActivePages.jsx","Pages/UsersByMostEditsPage.jsx","Pages/RecentEditSize.jsx","Pages/TestPage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","TitleContainer","className","this","props","title","subtitle","React","Component","NavbarLocal","state","history","activePage","window","location","href","Navbar","Collapse","Nav","Link","as","to","endsWith","HomeNavContainer","style","btnTitle1","btnTitle2","btnLink","type","btnStyle","btnText","HomeStats","text","errorCode","updateStats","$","ajax","url","success","response","html","find","intervalID","setInterval","clearInterval","ListGroup","horizontal","Item","id","HomePage","icon","faBars","faChartLine","faUser","createBrowserHistory","getMostEditsUsers","a","async","compare","b","editcount","users","query","action","format","list","auprop","aulimit","auwitheditsonly","auactiveusers","then","data","allusers","sort","getRecentEditsWithSize","edits","rcprop","rclimit","result","recentchanges","getRecentLargestEdits","editList","forEach","item","value","Math","abs","newlen","oldlen","getMostActivePages","prevTimestamp","queryRecentChanges","recentChanges","newTimestamp","activePages","countPageOccurances","getRecentActiveUsers","activeUsers","countUsers","tmpTimestamp","Date","toISOString","rcstart","rcend","params","n","paramsString","URLSearchParams","toString","API_ENDPOINT","fetch","json","titleCounts","change","actions","titles","Object","entries","map","userCounts","user","numActions","username","userNames","name","groups","itemsKey","items","batches","Array","createBatch","results","batch","batchString","join","push","catch","err","Promise","all","batchQuery","usprop","queryResult","userObj","array","size","length","splice","FeedData","maxItems","changes","newTimeStamp","unshift","pop","getTimeDifference","toCompare","round","getTime","TestFeedData","useState","feedData","setFeedData","setRecentChanges","useEffect","refresh","index","key","timestamp","GraphCard","onClick","pageLink","graph","Card","tag","Body","Title","SimpleBarGraph","tooltip","click","src","indexValue","loadData","getData","settings","bind","smlData","slice","fullGraph","setState","loaded","paused","method","refreshMethod","refreshInterval","refreshTime","margin","label","classname","clickable","top","right","bottom","left","keys","indexBy","padding","colors","scheme","colorBy","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","xAxis","legendPosition","legendOffset","axisLeft","yAxis","enableLabel","animate","isInteractive","motionStiffness","motionDamping","innerRadius","padAngle","cornerRadius","enableRadialLabels","radialLabelsSkipAngle","radialLabelsTextXOffset","radialLabelsTextColor","radialLabelsLinkOffset","radialLabelsLinkDiagonalLength","radialLabelsLinkHorizontalLength","radialLabelsLinkStrokeWidth","radialLabelsLinkColor","enableSlicesLabels","slicesLabelsSkipAngle","slicesLabelsTextColor","defs","background","color","stagger","rotation","lineWidth","spacing","match","GraphPage","explanation","onChange","handlePause","MostActiveUsersGraphSettings","fullData","pageAdditions","i","open","MostActiveUsers","event","MostActivePagesGraphSettings","MostActivePages","UsersByMostEditsGraphSettings","UsersByMostEditsPage","target","RecentEditSizeSettings","RecentEditSize","require","PieChart","class","CardDeck","App","exact","path","process","component","TestPage","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90f3ef14.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/legend.5378cb25.svg\";","import React from 'react'\n\n\nclass TitleContainer extends React.Component {\n    render() {\n        return(\n                <div className=\" text-left\">\n                     <h1 className=\"text-left  display-3\"><b>{this.props.title}</b></h1>\n                     <h4>{this.props.subtitle}</h4  >\n                  </div>\n        )\n    }\n}\n\nexport default TitleContainer\n","import React, { Component } from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nclass NavbarLocal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { history: this.props.history }\n  }\n  render() {\n    // var isActive = this.context.router.route.location.pathname\n    let activePage = window.location.href\n    return (\n      <Navbar>\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link\n              as={Link}\n              to=\"/\"\n              className={\n                activePage.endsWith('/') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Home\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/page\"\n              className={\n                activePage.endsWith('/page') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Page\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/feed\"\n              className={\n                activePage.endsWith('/feed') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Feed\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nexport default NavbarLocal\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass HomeNavContainer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"ting\">\n\t\t\t\n\t\t\t\t<h2 className={this.props.style}>{ this.props.btnTitle1 }</h2>\n\t\t\t\t<h2 className={this.props.style}>{ this.props.btnTitle2 }</h2>\n\t\t\t\t<br/>\t\n\t\t\t\t<Link to={ this.props.btnLink }>\n\t\t\t\t\t <button type=\"button\" className={this.props.btnStyle}>{ this.props.btnText }</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HomeNavContainer;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {ListGroup} from 'react-bootstrap';\nimport $ from 'jquery';\n\nclass HomeStats extends Component {\n\n\t state = {\n\t\t text: 'something',\n\t\t errorCode: 'Loading...',\n\t }\n\n\t componentDidMount() {\n\t  this.updateStats();\n\t  this.intervalID = setInterval(\n\t    () => this.updateStats(),\n\t    5000\n\t  );\n\t}\n\tcomponentWillUnmount() {\n\t  clearInterval(this.intervalID);\n\t}\n\n     updateStats = () => {\n\t\t$.ajax({\n  \t\t  url: \"https://cors-anywhere.herokuapp.com/https://www.wikidata.org/wiki/Special:Statistics\",\n  \t\t  type: 'GET',\n  \t\t  success: function(response) {\n\t\t\t  $(\"#div1\").html($($(response).find('.mw-statistics-articles')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div2\").html($($(response).find('.mw-statistics-edits')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div3\").html($($(response).find('.mw-statistics-users')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div4\").html($($(response).find('.mw-statistics-users-active')).find('.mw-statistics-numbers'));\n\t\t  }\n  \t   });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t<ListGroup horizontal>\n\t\t\t  <ListGroup.Item className=\"list-group-item-black\"><h1 id=\"div1\">{ this.state.errorCode }</h1><h1>Items</h1></ListGroup.Item>\n\t\t\t  <ListGroup.Item  className=\"list-group-item-red\"><h1 id=\"div2\">{ this.state.errorCode }</h1><h1>Edits</h1></ListGroup.Item>\n\t\t\t  <ListGroup.Item  className=\"list-group-item-green\"><h1 id=\"div3\">{ this.state.errorCode }</h1><h1>Users</h1></ListGroup.Item>\n\t\t\t  <ListGroup.Item  className=\"list-group-item-blue\"><h1 id=\"div4\">{ this.state.errorCode }</h1><h1>Active Users</h1></ListGroup.Item>\n\t\t\t</ListGroup>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HomeStats;\n","import React, { Component } from 'react'\nimport TitleContainer from '../Components/TitleContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from '../Components/Navbar'\nimport HomeNavContainer from '../Components/HomeNavContainer'\nimport HomeStatsContainer from '../Components/HomeStats'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChartLine } from '@fortawesome/free-solid-svg-icons'\nimport { faBars } from '@fortawesome/free-solid-svg-icons'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { history: this.props.history }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <div className=\"HomePageContent row margin-right: -15px margin-left: -15px\">\n\t\t<div className = \"col-5\">\n           <TitleContainer\n             title=\"Wikidata Live\"\n             subtitle=\"A web app to visualise recent changes to Wikidata in quasi real time.\"\n           ></TitleContainer>\n\t\t   </div>\n\t\t   <div className = \"col-7\">\n\t\t   <div className= \"row\">\n\t\t   <div className=\"col-4\">\n\t\t   <h1 className=\"text-red\"><FontAwesomeIcon icon={faBars}/></h1>\n           <HomeNavContainer\n             style=\"font-weight-bold text-red\"\n\t\t\t btnStyle=\"align-bottom btn btn-outline-red\"\n             btnTitle1=\"Wikidata\"\n\t\t\t btnTitle2=\"Feed\"\n             btnText=\"Feed\"\n             btnLink=\"/feed\"\n           ></HomeNavContainer>\n\t\t   </div>\n\t\t   <div className=\"col-4\">\n\t\t    <h1 className=\"text-green\"><FontAwesomeIcon icon={faChartLine}/></h1>\n           <HomeNavContainer\n             style=\"font-weight-bold text-green\"\n\t\t\t btnStyle=\"align-bottom btn btn-outline-green\"\n             btnTitle1=\"Wikidata\"\n\t\t\t btnTitle2=\"Dashboard\"\n             btnText=\"Dashboard\"\n             btnLink=\"/page\"\n           ></HomeNavContainer>\n\t\t   </div>\n\t\t   <div className=\"col-4\">\n\t\t   <h1 className=\"text-blue\"><FontAwesomeIcon icon={faUser}/></h1>\n           <HomeNavContainer\n             style=\"font-weight-bold text-blue\"\n\t\t\t btnStyle=\"align-bottom btn btn-outline-blue\"\n             btnTitle1=\"User\"\n\t\t\t btnTitle2=\"Data\"\n             btnText=\"Users\"\n             btnLink=\"/most-active-users\"\n           ></HomeNavContainer>\n\t\t   </div>\n\t\t   </div>\n\t\t   </div>\n        </div>\n\t\t<div className = \"statsContent row justify-content-center\">\n        <HomeStatsContainer />\n\t\t</div>\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","const API_ENDPOINT = 'https://www.wikidata.org/w/api.php'\nconst MAX_QUERY_SIZE = 50\nconst NUM_RETRIES = 5\n\n/**\n * @typedef {Object} User\n * @property {number} userid - The user's id\n * @property {number} name - The user's name\n * @property {number} editcount - The number of edits the user did\n * @property {number} recentactions - The number of actions a user did within\n *           30 days\n * @property {Array} groups - An array of strings which contains the groups\n *           the user belongs in. For example if the user contains \"bot\", it is\n *           a non human user\n */\n\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most edits in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostEditsUsers = async () => {\n  const compare = (a, b) => b.editcount - a.editcount\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most recent actions in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostActiveUsers = async () => {\n  const compare = (a, b) => b.recentactions - a.recentactions\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n\nexport const getRecentEditsWithSize = async () => {\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'recentchanges',\n    rcprop: 'title|ids|sizes|timestamp',\n    rclimit: '500',\n  }\n  const edits = query(params, NUM_RETRIES).then(\n    result => result.query.recentchanges\n  )\n  return edits\n}\n/**\n * Returns recent 500 recent edits sorted by size of changes made in absolute value\n * So large additions and large deletions are included\n */\nexport const getRecentLargestEdits = async () => {\n  const editList = await getRecentEditsWithSize()\n\n  editList.forEach(item => {\n    item.value = Math.abs(item.newlen - item.oldlen)\n    item.id = item.title\n  })\n\n  editList.sort((a, b) => b.value - a.value)\n\n  return editList\n}\n\n/**\n * @typedef {Object} PageInfo\n * @property {string} id - The id of the page\n * @property {actions} actions - Number of actions which has been performed on\n *           that page\n * @property {string} title - The title of the page\n */\n\n/**\n * Returns an array of most active pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<PageInfo[] | string>}\n */\nexport const getMostActivePages = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activePages = recentChanges.then(recentChanges =>\n    countPageOccurances(recentChanges)\n  )\n  return [await activePages, newTimestamp]\n}\n\n/**\n * Returns an array of most users pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<User[] | string>}\n */\nexport const getRecentActiveUsers = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activeUsers = recentChanges.then(activeUsers => countUsers(activeUsers))\n  return [await activeUsers, newTimestamp]\n}\n\n/**\n * Batches a query to cirumvent the 50 items query limit\n *\n * @param {string} itemsKey the query key\n * @param {Array} items the items to add to the query\n * @param {Object} params the parameters of the query\n */\nexport const batchQuery = async (itemsKey, items, params) => {\n  let result = []\n  let batches = null\n  if (items instanceof Array) batches = createBatch(items, MAX_QUERY_SIZE)\n  else batches = [[items]]\n  const results = batches.map(async batch => {\n    const batchString = batch.join('|')\n    params[itemsKey] = batchString\n    return query(params, NUM_RETRIES)\n      .then(data => result.push(data))\n      .catch(err => null)\n  })\n  await Promise.all(results)\n  return result\n}\n\n/**\n * Queries the API for the most recent changes\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Array<Promise<recentChanges[]> | string>}\n */\nexport const queryRecentChanges = prevTimestamp => {\n  let tmpTimestamp = new Date()\n  const newTimestamp = tmpTimestamp.toISOString()\n  tmpTimestamp = tmpTimestamp - 1000\n  tmpTimestamp = new Date(tmpTimestamp).toISOString()\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'recentchanges',\n    rcprop: 'title|ids|timestamp|user',\n    rclimit: 'max',\n    rcstart: tmpTimestamp,\n    rcend: prevTimestamp,\n  }\n  const recentChanges = query(params, NUM_RETRIES).then(\n    data => data.query.recentchanges\n  )\n  return [recentChanges, newTimestamp]\n}\n\n// ~ Helper Functions ---------------------------------------------------------\n\n/**\n * Returns a the response of a query to the Wikidata API endpoint\n *\n * @param {Object} params - Object of parameters to use when querying\n * @param {number} n - Number of times to retry if failure occurs\n * @return {Promise<Object>}\n */\nconst query = async (params, n) => {\n  try {\n    const paramsString = new URLSearchParams(params).toString()\n    const url = API_ENDPOINT + '?' + paramsString + '&origin=*'\n    return await fetch(url).then(response => response.json())\n  } catch (err) {\n    if (n === 1) throw err\n    return await query(params, n - 1)\n  }\n}\n\n/**\n * @typedef {Object} recentChanges\n * @property {number} ns\n * @property {number} old_revid - The old revision id\n * @property {number} pageid - The page id\n * @property {number} rcid - The recent change id\n * @property {number} revid - The current revision id\n * @property {string} timestamp - Timestamp of change\n * @property {string} title - Title of the page changed\n * @property {string} type - Type of action e.g. \"new\", \"edit\"\n * @property {string} user - The username of the editor\n */\n\n/**\n * Returns the number of times a page appeared on the recent changes feed sorted by\n * number of actions done on the page\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countPageOccurances = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const titleCounts = {}\n  recentChanges.forEach(change => {\n    const actions = titleCounts[change.title] || 0\n    titleCounts[change.title] = actions + 1\n  })\n  const titles = Object.entries(titleCounts).map(([id, actions]) => ({\n    id,\n    actions,\n  }))\n  titles.sort(compare)\n  return titles\n}\n\n/**\n * Returns the number of times a user appeared on the recent changes feed sorted by\n * number of actions done by that user\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countUsers = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const userCounts = {}\n  recentChanges.forEach(change => {\n    const user = change.user\n    const numActions = userCounts[user] || 0\n    userCounts[user] = numActions + 1\n  })\n  const users = Object.entries(userCounts).map(([username, actions]) => ({\n    username,\n    actions,\n  }))\n  const userNames = users.map(({ name }) => name)\n  const key = 'ususers'\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'users',\n    usprop: 'groups',\n  }\n  const groups = {}\n  batchQuery(key, userNames, params)\n    .then(data =>\n      data.forEach(queryResult => {\n        const users = queryResult.query.users\n        users.forEach(userObj => {\n          if (userObj.groups) groups[userObj.name] = userObj.groups\n        })\n      })\n    )\n    .then(() => {\n      users.forEach(userObj => (userObj.groups = groups[userObj.name]))\n      users.sort(compare)\n    })\n  return users\n}\n\n/**\n * Splits up an array into smaller arrays\n *\n * @param {Array} array - Array to create batches from\n * @param {number} size - Batch size\n * @return {Array} batches - An array containing the batches which are of\n *         length size\n */\nconst createBatch = (array, size) => {\n  const batches = []\n  while (array.length > 0) {\n    batches.push(array.splice(0, size))\n  }\n  return batches\n}\n","import { queryRecentChanges } from './APIWrapper'\n\n/** Class which wraps the Wikidata API recent changes feed */\nclass FeedData {\n  /**\n   * Create a new feed data object\n   *\n   * @param {number} maxItems - the maximum number of items to keep in the\n   *        feed.\n   */\n  constructor(maxItems) {\n    this.changes = []\n    this.maxItems = maxItems\n    this.prevTimestamp = new Date().toISOString()\n  }\n\n  refresh() {\n    const [recentChanges, newTimeStamp] = queryRecentChanges(this.prevTimestamp)\n    recentChanges.then(changes =>\n      changes.forEach(change => {\n        this.changes.unshift(change)\n        if (this.changes.length > this.maxItems) this.changes.pop()\n      })\n    )\n    this.prevTimestamp = newTimeStamp\n  }\n}\n\nexport default FeedData\n","import React, { useState, useEffect } from 'react'\nimport FeedData from '../Backend/FeedData'\n// eslint-disable-next-line\nimport style from '../style.css'\n\nfunction TestFeedData() {\n  const [feedData, setFeedData] = useState(new FeedData(30))\n  const [recentChanges, setRecentChanges] = useState({\n    items: [],\n  })\n\n  useEffect(() => {\n    const refresh = setInterval(() => {\n      feedData.refresh()\n      setRecentChanges({ items: feedData.changes })\n    }, 1000)\n    return () => {\n      setRecentChanges({ items: [] })\n      clearInterval(refresh)\n      setFeedData(null)\n    }\n  }, [feedData])\n\n  return (\n    <div>\n      <h3 className=\"text-blue text-left\">Most Recent Activity</h3>\n      <ul className=\"list-group\">\n        {recentChanges.items.map((item, index) => (\n          <li className=\"list-group-item text-left\" key={index}>\n            {`User ${item.user} did action ${item.type} on ${\n              item.title\n            } ${getTimeDifference(item.timestamp)} seconds ago`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nconst getTimeDifference = toCompare =>\n  Math.round(\n    Math.abs(new Date().getTime() - new Date(toCompare).getTime()) / 1000\n  )\n\nexport default TestFeedData\n","import Card from 'react-bootstrap/Card'\nimport React, { Component } from 'react'\n\nclass GraphCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      title: this.props.title,\n      pageLink: this.props.pageLink,\n      graph: this.props.graph,\n    }\n  }\n\n  render() {\n    return (\n      <Card onClick={this.onClick} tag=\"a\" className=\"graph-card\">\n        <Card.Body>\n          <Card.Title className=\"card-title\">{this.state.title}</Card.Title>\n          {this.state.graph}\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  onClick = () => {\n    this.state.history.push(this.state.pageLink)\n  }\n}\n\nexport default GraphCard\n","import React, { Component } from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\nclass SimpleBarGraph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      data: null,\n      fullGraph: this.props.fullGraph,\n    }\n\n    this.loadData()\n  }\n\n  tooltip = function(click, url) {\n    return (\n      <div className=\"iframe-container\">\n        <iframe\n          src={url + click.indexValue}\n          className=\"iframe\"\n          title=\"tooltip-option-2\"\n        />\n      </div>\n    )\n  }\n\n  loadData = async () => {\n    let getData = this.props.settings.getData.bind(this)\n    let data = await getData()\n    let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n    this.setState({\n      loaded: true,\n      data: smlData,\n    })\n  }\n\n  refresh = async () => {\n    if (!this.props.paused) {\n      let method = this.props.settings.refreshMethod.bind(this)\n      await method()\n    }\n  }\n\n  componentDidMount() {\n    this.refreshInterval = setInterval(async () => {\n      await this.refresh()\n    }, this.props.settings.refreshTime)\n  }\n\n  render() {\n    let margin = {}\n    let label = null\n    let classname = ''\n    let onClick = null\n    let clickable = false\n    let tooltip = null\n    if (this.state.fullGraph) {\n      margin = { top: 5, right: 30, bottom: 80, left: 80 }\n      label = true\n      classname = 'full-graph-container'\n      if (this.props.settings.onClick) {\n        onClick = this.props.settings.onClick\n        clickable = true\n      }\n      if (this.props.settings.tooltip) {\n        tooltip = this.props.settings.tooltip.bind(this)\n      }\n    } else {\n      margin = { top: 0, right: 0, bottom: 0, left: 0 }\n      label = false\n      classname = 'Graph-Container-Card'\n    }\n    return (\n      <div>\n        {!this.state.loaded ? (\n          'Loading...'\n        ) : (\n          <div className={classname}>\n            <ResponsiveBar\n              data={this.state.data}\n              keys={this.props.settings.keys}\n              indexBy={this.props.settings.index}\n              margin={margin}\n              padding={0.3}\n              colors={{ scheme: this.props.settings.colors }}\n              colorBy=\"index\"\n              borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n              axisTop={null}\n              axisRight={null}\n              axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 30,\n                legend: this.props.settings.xAxis,\n                legendPosition: 'start',\n                legendOffset: 40,\n              }}\n              axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: this.props.settings.yAxis,\n                legendPosition: 'middle',\n                legendOffset: -60,\n              }}\n              enableLabel={label}\n              onClick={clickable ? onClick : function() {}}\n              animate={label}\n              isInteractive={label}\n              motionStiffness={90}\n              motionDamping={15}\n              tooltip={tooltip}\n            />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SimpleBarGraph\n","import React, { Component } from 'react'\nimport { ResponsivePie } from '@nivo/pie'\n\nclass SimpleBarGraph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      data: null,\n      fullGraph: this.props.fullGraph,\n    }\n\n    this.loadData()\n  }\n\n  tooltip = function(click, url) {\n    return (\n      <div className=\"iframe-container\">\n        <iframe\n          src={url + click.id}\n          className=\"iframe\"\n          title=\"tooltip-option-2\"\n        />\n      </div>\n    )\n  }\n\n  loadData = async () => {\n    let getData = this.props.settings.getData.bind(this)\n    let data = await getData()\n    let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n    this.setState({\n      loaded: true,\n      data: smlData,\n    })\n  }\n\n  refresh = async () => {\n    if (!this.props.paused) {\n      this.loadData()\n    }\n  }\n\n  componentDidMount() {\n    this.refreshInterval = setInterval(async () => {\n      await this.refresh()\n    }, this.props.settings.refreshTime)\n  }\n\n  render() {\n    let margin = {}\n    let label = null\n    let classname = ''\n    let onClick = null\n    let clickable = false\n    let tooltip = null\n    if (this.state.fullGraph) {\n      margin = { top: 30, right: 30, bottom: 30, left: 80 }\n      label = true\n      classname = 'full-graph-container'\n      if (this.props.settings.onClick) {\n        onClick = this.props.settings.onClick\n        clickable = true\n      }\n      if (this.props.settings.tooltip) {\n        tooltip = this.props.settings.tooltip.bind(this)\n      }\n    } else {\n      margin = { top: 0, right: 0, bottom: 0, left: 0 }\n      label = false\n      classname = 'Graph-Container-Card'\n    }\n    return (\n      <div>\n        {!this.state.loaded ? (\n          'Loading...'\n        ) : (\n          <div className={classname}>\n            <ResponsivePie\n              data={this.state.data}\n              margin={margin}\n              innerRadius={0.4}\n              padAngle={0}\n              cornerRadius={0}\n              colors={{ scheme: 'paired' }}\n              enableRadialLabels={label}\n              radialLabelsSkipAngle={10}\n              radialLabelsTextXOffset={6}\n              radialLabelsTextColor=\"#333333\"\n              radialLabelsLinkOffset={0}\n              radialLabelsLinkDiagonalLength={16}\n              radialLabelsLinkHorizontalLength={24}\n              radialLabelsLinkStrokeWidth={1}\n              radialLabelsLinkColor={{ from: 'color' }}\n              enableSlicesLabels={label}\n              slicesLabelsSkipAngle={10}\n              slicesLabelsTextColor=\"#333333\"\n              animate={true}\n              motionStiffness={90}\n              motionDamping={15}\n              defs={[\n                {\n                  id: 'dots',\n                  type: 'patternDots',\n                  background: 'inherit',\n                  color: 'rgba(255, 255, 255, 0.3)',\n                  size: 4,\n                  padding: 1,\n                  stagger: true,\n                },\n                {\n                  id: 'lines',\n                  type: 'patternLines',\n                  background: 'inherit',\n                  color: 'rgba(255, 255, 255, 0.3)',\n                  rotation: -45,\n                  lineWidth: 6,\n                  spacing: 10,\n                },\n              ]}\n              onClick={onClick}\n              tooltip={tooltip}\n              defs={[\n                {\n                  id: 'lines',\n                  type: 'patternLines',\n                  background: 'inherit',\n                  color: 'rgba(255, 255, 255, 0.4)',\n                  rotation: -45,\n                  lineWidth: 6,\n                  spacing: 10,\n                },\n              ]}\n              fill={[\n                {\n                  match: {\n                    type: 'edit',\n                  },\n                  id: 'lines',\n                },\n              ]}\n            />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SimpleBarGraph\n","import React, { Component } from 'react'\nimport Navbar from '../Components/Navbar'\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n      title: this.props.name,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <div className=\"infobox\">\n          <h2>{this.state.title}</h2>\n          <p />\n          <p>{this.props.explanation}</p>\n          <p>\n            <form onChange={this.props.handlePause}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  id=\"paused\"\n                  name=\"paused\"\n                  value={this.props.paused}\n                />{' '}\n                {'Paused'}\n              </label>\n            </form>\n          </p>\n        </div>\n        {this.props.graph}\n      </div>\n    )\n  }\n}\n\nexport default GraphPage\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getRecentActiveUsers } from '../Backend/APIWrapper'\n\nexport const MostActiveUsersGraphSettings = {\n  getData: async function() {\n    let [data, newTimestamp] = await getRecentActiveUsers(\n      new Date().toISOString()\n    )\n    data = data.slice(0, 50)\n    this.setState({\n      fullData: data,\n      prevTimestamp: newTimestamp,\n    })\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: async function() {\n    let [data, newTimestamp] = await getRecentActiveUsers(\n      this.state.prevTimestamp\n    )\n    this.setState({ prevTimestamp: newTimestamp })\n    data = data.slice(0, 50)\n    if (this.state.fullData) {\n      let fullData = this.state.fullData\n      data.forEach(pageAdditions => {\n        let index = -1\n        for (let i = 0; i < fullData.length; i += 1) {\n          if (fullData[i].username === pageAdditions.username) {\n            index = i\n          }\n        }\n        if (index !== -1) {\n          fullData[index].actions += pageAdditions.actions\n        } else {\n          fullData.push(pageAdditions)\n        }\n      })\n      fullData.sort((a, b) => b.actions - a.actions)\n      fullData.slice(0, 50)\n      let smlData = fullData.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ fullData: fullData, data: smlData })\n    } else {\n      let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ data: smlData })\n    }\n  },\n  keys: ['actions'],\n  index: 'username',\n  xAxis: 'username',\n  yAxis: 'actions',\n  colors: 'set2',\n  onClick: function(click) {\n    window.open(\n      'https://www.wikidata.org/wiki/User:' + click.indexValue,\n      '_blank'\n    )\n  },\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass MostActiveUsers extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      paused: false,\n    }\n  }\n\n  handlePause = event => {\n    let paused = this.state.paused\n    this.setState({ paused: !paused })\n  }\n\n  render() {\n    return (\n      <GraphPage\n        handlePause={this.handlePause}\n        paused={this.state.paused}\n        explanation={\n          'A live view of the users active right now.' +\n          \" Hover over a bar to get a preview of the user's page, or click to open the user's page in a new tab.\"\n        }\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActiveUsersGraphSettings}\n            paused={this.state.paused}\n          />\n        }\n        name={'Most Active Users'}\n      />\n    )\n  }\n}\nexport default MostActiveUsers\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostActivePages } from '../Backend/APIWrapper'\n\nexport const MostActivePagesGraphSettings = {\n  getData: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      new Date().toISOString()\n    )\n    data = data.slice(0, 50)\n    this.setState({\n      fullData: data,\n      prevTimestamp: newTimestamp,\n    })\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      this.state.prevTimestamp\n    )\n    this.setState({ prevTimestamp: newTimestamp })\n    data = data.slice(0, 50)\n    if (this.state.fullData) {\n      let fullData = this.state.fullData\n      data.forEach(pageAdditions => {\n        let index = -1\n        for (let i = 0; i < fullData.length; i += 1) {\n          if (fullData[i].id === pageAdditions.id) {\n            index = i\n          }\n        }\n        if (index !== -1) {\n          fullData[index].actions += pageAdditions.actions\n        } else {\n          fullData.push(pageAdditions)\n        }\n      })\n      fullData.sort((a, b) => b.actions - a.actions)\n      fullData.slice(0, 50)\n      let smlData = fullData.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ fullData: fullData, data: smlData })\n    } else {\n      let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ data: smlData })\n    }\n  },\n  keys: ['actions'],\n  index: 'id',\n  xAxis: 'pages',\n  yAxis: 'actions',\n  colors: 'pastel1',\n  onClick: function(click) {\n    window.open('https://www.wikidata.org/wiki/' + click.indexValue, '_blank')\n  },\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/')\n  },\n}\n\nclass MostActivePages extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      paused: false,\n    }\n  }\n\n  handlePause = event => {\n    let paused = this.state.paused\n    this.setState({ paused: !paused })\n  }\n\n  render() {\n    return (\n      <GraphPage\n        handlePause={this.handlePause}\n        paused={this.state.paused}\n        explanation={\n          'A live view of the pages being edited right now.' +\n          ' Hover over a bar to get a preview of the page, or click to open the page in a new tab.'\n        }\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActivePagesGraphSettings}\n            paused={this.state.paused}\n          />\n        }\n        name={'Most Active Pages'}\n      />\n    )\n  }\n}\nexport default MostActivePages\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostEditsUsers } from '../Backend/APIWrapper'\n\nexport const UsersByMostEditsGraphSettings = {\n  getData: async function() {\n    let data = await getMostEditsUsers()\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: function() {\n    this.loadData()\n  },\n  keys: ['editcount'],\n  index: 'name',\n  xAxis: 'users',\n  yAxis: 'edit count',\n  colors: 'paired',\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass UsersByMostEditsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      paused: false,\n    }\n  }\n\n  handlePause = event => {\n    this.setState({ paused: event.target.value })\n  }\n\n  render() {\n    return (\n      <GraphPage\n        handlePause={this.handlePause}\n        paused={this.state.paused}\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={UsersByMostEditsGraphSettings}\n            paused={this.state.paused}\n          />\n        }\n        name={'Users By Most Edits'}\n      />\n    )\n  }\n}\nexport default UsersByMostEditsPage\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport PieChart from '../Components/PieChart'\nimport { getRecentLargestEdits } from '../Backend/APIWrapper'\n\nexport const RecentEditSizeSettings = {\n  getData: getRecentLargestEdits,\n  refreshTime: 2000,\n  refreshMethod: getRecentLargestEdits,\n  value: item => {\n    Math.abs(item.newlen - item.oldlen)\n  },\n  colorBy: 'type',\n  colors: 'pastel1',\n  onClick: function(click) {\n    window.open('https://www.wikidata.org/wiki/' + click.id, '_blank')\n  },\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/')\n  },\n}\n\nclass RecentEditSize extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      paused: false,\n    }\n  }\n\n  handlePause = event => {\n    let paused = this.state.paused\n    this.setState({ paused: !paused })\n  }\n\n  render() {\n    return (\n      <GraphPage\n        handlePause={this.handlePause}\n        paused={this.state.paused}\n        explanation={\n          <div>\n            {'The largest of the last 500 edits.' +\n              ' Hover over a section to get a preview of the page, or click to open the page in a new tab.'}\n            <p>\n              <img className=\"legend\" src={require('../legend.svg')} />\n            </p>\n          </div>\n        }\n        graph={\n          <PieChart\n            fullGraph={true}\n            settings={RecentEditSizeSettings}\n            paused={this.state.paused}\n          />\n        }\n        name={'Largest Recent Edits'}\n      />\n    )\n  }\n}\nexport default RecentEditSize\n","import React, { Component } from 'react'\nimport Navbar from '../Components/Navbar'\nimport GraphCard from '../Components/GraphCard'\nimport FeedData from '../Components/FeedData'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport PieChart from '../Components/PieChart'\nimport { MostActiveUsersGraphSettings } from './MostActiveUsers'\nimport { MostActivePagesGraphSettings } from './MostActivePages'\nimport { UsersByMostEditsGraphSettings } from './UsersByMostEditsPage'\nimport { RecentEditSizeSettings } from './RecentEditSize'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar />\n        <div class=\"row justify-content-left text-dark\">\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-4\">\n            <div class=\"feedContainer\">\n              <FeedData />\n            </div>\n          </div>\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-8\">\n            <div className=\"deck-container\">\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Users by most edits\"\n                  pageLink=\"users-by-most-edits\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      paused={true}\n                      fullGraph={false}\n                      settings={UsersByMostEditsGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Most Active Users\"\n                  pageLink=\"most-active-users\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      paused={false}\n                      fullGraph={false}\n                      settings={MostActiveUsersGraphSettings}\n                    />\n                  }\n                />\n              </CardDeck>\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Most Active Pages\"\n                  pageLink=\"most-active-pages\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      paused={false}\n                      fullGraph={false}\n                      settings={MostActivePagesGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Largest Recent Edits\"\n                  pageLink=\"recent-edit-size\"\n                  history={this.state.history}\n                  graph={\n                    <PieChart\n                      paused={true}\n                      fullGraph={false}\n                      settings={RecentEditSizeSettings}\n                    />\n                  }\n                />\n              </CardDeck>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import React from 'react'\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport HomePage from './Pages/HomePage'\nimport history from './Utils/History'\nimport FeedData from './Components/FeedData'\nimport TestPage from './Pages/TestPage'\nimport UsersByMostEditsPage from './Pages/UsersByMostEditsPage'\nimport MostActiveUsers from './Pages/MostActiveUsers'\nimport MostActivePages from './Pages/MostActivePages'\nimport RecentEditSize from './Pages/RecentEditSize'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport ReactDOM from 'react-dom'\n\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n          <Route\n            exact\n            path={process.env.PUBLIC_URL + '/'}\n            component={HomePage}\n          />\n          <Route exact path=\"/page\" component={TestPage} />\n          <Route\n            exact\n            path=\"/users-by-most-edits\"\n            component={UsersByMostEditsPage}\n          />\n          <Route exact path=\"/most-active-users\" component={MostActiveUsers} />\n          <Route exact path=\"/recent-edit-size\" component={RecentEditSize} />\n          <Route exact path=\"/most-active-pages\" component={MostActivePages} />\n          <Route exact path=\"/feed\" component={FeedData} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}