{"version":3,"sources":["Components/TitleContainer.js","Components/Navbar.jsx","Components/HomeNavContainer.js","Components/HomeStats.js","Pages/HomePage.jsx","Utils/History.js","Backend/FeedData.js","Examples/TestFeedData.jsx","Components/GraphCard.jsx","Components/SampleGraph.jsx","Components/SimpleBarGraph.jsx","Pages/GraphPage.jsx","Backend/APIWrapper.js","Pages/MostActiveUsers.jsx","Pages/MostActivePages.jsx","Pages/UsersByMostEditsPage.jsx","Pages/TestPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TitleContainer","className","this","props","title","subtitle","React","Component","NavbarLocal","state","history","activePage","window","location","href","Navbar","Collapse","Nav","Link","as","to","endsWith","HomeNavContainer","btnImage","btnTitle","btnLink","type","btnText","HomeStats","text","errorCode","updateStats","$","ajax","url","success","response","html","find","error","setState","intervalID","setInterval","clearInterval","id","HomePage","createBrowserHistory","FeedData","maxItems","eventSource","EventSource","changes","addEventListener","event","handleMessage","change","JSON","parse","data","unshift","length","pop","getTimeDifference","toCompare","Math","round","abs","Date","getTime","TestFeedData","useState","feedData","items","recentChanges","setRecentChanges","useEffect","class","map","item","index","key","user","timestamp","GraphCard","onClick","push","pageLink","graph","Card","tag","Body","Title","SampleGraph","render","margin","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","color","x","y","SimpleBarGraph","tooltip","click","src","indexValue","loadData","a","async","getData","settings","bind","smlData","slice","fullGraph","loaded","refreshInterval","method","refreshMethod","refreshTime","label","classname","clickable","keys","indexBy","padding","colorBy","borderColor","modifiers","xAxis","yAxis","enableLabel","animate","isInteractive","motionStiffness","motionDamping","GraphPage","name","getMostEditsUsers","compare","b","editcount","users","query","action","format","list","auprop","aulimit","auwitheditsonly","auactiveusers","then","allusers","sort","getMostActiveUsers","recentactions","getMostActivePages","prevTimestamp","queryRecentChanges","newTimestamp","activePages","countPageOccurances","pageTitles","ids","convertIDs","convertedIDs","forEach","pageTitle","converted","batches","Array","createBatch","results","batch","titlesString","join","params","languages","entities","labels","value","catch","err","Promise","all","n","paramsString","URLSearchParams","toString","API_ENDPOINT","fetch","json","tmpTimestamp","toISOString","rcprop","rclimit","rcstart","rcend","recentchanges","titleCounts","actions","titles","Object","entries","array","size","splice","MostActiveUsersGraphSettings","MostActiveUsers","MostActivePagesGraphSettings","fullData","pageAdditions","i","open","UsersByMostEditsPage","UsersByMostEditsGraphSettings","CardDeck","App","exact","path","component","TestPage","MostActivePages","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e27ad21a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\nclass TitleContainer extends React.Component {\r\n    render() {\r\n        return(\r\n                <div className=\"col-md-6 text-left\">\r\n                     <h1 className=\"text-left  display-3\"><b>{this.props.title}</b></h1>\r\n                     <h4>{this.props.subtitle}</h4  >\r\n                  </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TitleContainer\r\n","import React, { Component } from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass NavbarLocal extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = { history: this.props.history }\r\n  }\r\n  render() {\r\n    // var isActive = this.context.router.route.location.pathname\r\n    let activePage = window.location.href\r\n    return (\r\n      <Navbar>\r\n        <Navbar.Collapse>\r\n          <Nav>\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"/\"\r\n              className={\r\n                activePage.endsWith('/') ? 'nav-link--active' : 'nav-link'\r\n              }\r\n            >\r\n              Home\r\n            </Nav.Link>\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"/page\"\r\n              className={\r\n                activePage.endsWith('/page') ? 'nav-link--active' : 'nav-link'\r\n              }\r\n            >\r\n              Page\r\n            </Nav.Link>\r\n            <Nav.Link\r\n              as={Link}\r\n              to=\"/feed\"\r\n              className={\r\n                activePage.endsWith('/feed') ? 'nav-link--active' : 'nav-link'\r\n              }\r\n            >\r\n              Feed\r\n            </Nav.Link>\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    )\r\n  }\r\n}\r\n\r\nexport default NavbarLocal\r\n","import React, { Component } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass HomeNavContainer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"col-md-2 inline\">\r\n\t\t\t\t<h1>{ this.props.btnImage }</h1>\r\n\t\t\t\t<p className=\"font-weight-bold\">{ this.props.btnTitle }</p>\r\n\t\t\t\t<Link to={ this.props.btnLink }>\r\n\t\t\t\t\t <button type=\"button\" className=\"align-bottom btn btn-outline-primary\">{ this.props.btnText }</button>\r\n\t\t\t\t</Link>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default HomeNavContainer;\r\n","import React, { Component } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport $ from 'jquery';\r\n\r\nclass HomeStats extends Component {\r\n\r\n\t state = {\r\n\t\t text: 'something',\r\n\t\t errorCode: '',\r\n\t }\r\n\r\n\t componentDidMount() {\r\n\t  this.updateStats();\r\n\t  this.intervalID = setInterval(\r\n\t    () => this.updateStats(),\r\n\t    10000\r\n\t  );\r\n\t}\r\n\tcomponentWillUnmount() {\r\n\t  clearInterval(this.intervalID);\r\n\t}\r\n\r\n     updateStats = () => {\r\n\t\t$.ajax({\r\n  \t\t  url: \"https://cors-anywhere.herokuapp.com/https://www.wikidata.org/wiki/Special:Statistics\",\r\n  \t\t  type: 'GET',\r\n  \t\t  success: function(response) {\r\n\t\t\t  $(\"#div1\").html($($(response).find('.mw-statistics-articles')).find('.mw-statistics-numbers'));\r\n\t  \t\t  $(\"#div2\").html($($(response).find('.mw-statistics-edits')).find('.mw-statistics-numbers'));\r\n\t  \t\t  $(\"#div3\").html($($(response).find('.mw-statistics-users')).find('.mw-statistics-numbers'));\r\n\t  \t\t  $(\"#div4\").html($($(response).find('.mw-statistics-users-active')).find('.mw-statistics-numbers'));\r\n\t\t  },\r\n\t\t error: this.setState({errorCode: \"Could not fetch data\"})\r\n  \t   });\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div1\">{ this.state.errorCode }</p>Items</div>\r\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div2\">{ this.state.errorCode }</p>Edits</div>\r\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div3\">{ this.state.errorCode }</p>Users</div>\r\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div4\">{ this.state.errorCode }</p>Active Users</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default HomeStats;\r\n","import React, { Component } from 'react'\r\nimport TitleContainer from '../Components/TitleContainer'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Navbar from '../Components/Navbar'\r\nimport HomeNavContainer from '../Components/HomeNavContainer'\r\nimport HomeStatsContainer from '../Components/HomeStats'\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = { history: this.props.history }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"HomePage\">\r\n        <Navbar history={this.state.history} />\r\n        <div className=\"row margin-right: -15px margin-left: -15px\">\r\n           <TitleContainer\r\n             title=\"Wikidata Live\"\r\n             subtitle=\"A web app to visualise recent changes to Wikidata in quasi real time.\"\r\n           ></TitleContainer>\r\n           <HomeNavContainer\r\n             btnImage=\"W\"\r\n             btnTitle=\"Wikidata Feed\"\r\n             btnText=\"Wikidata\"\r\n             btnLink=\"/feed\"\r\n           ></HomeNavContainer>\r\n           <HomeNavContainer\r\n             btnImage=\"M\"\r\n             btnTitle=\"Graph Data\"\r\n             btnText=\"Graphs\"\r\n             btnLink=\"/page\"\r\n           ></HomeNavContainer>\r\n           <HomeNavContainer\r\n             btnImage=\"👤\"\r\n             btnTitle=\"User Data\"\r\n             btnText=\"Users\"\r\n             btnLink=\"/\"\r\n           ></HomeNavContainer>\r\n        </div>\r\n        <HomeStatsContainer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage\r\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","const URL = 'https://stream.wikimedia.org/v2/stream/recentchange'\r\n\r\n/** Class which wraps the Wikidata API recent changes feed */\r\nclass FeedData {\r\n  /**\r\n   * Create a new feed data object\r\n   *\r\n   * @param {number} maxItems - the maximum number of items to keep in the\r\n   *        feed.\r\n   */\r\n  constructor(maxItems) {\r\n    this.eventSource = new EventSource(URL)\r\n    this.changes = []\r\n    this.maxItems = maxItems\r\n    this.eventSource.addEventListener('message', (event) =>\r\n      this.handleMessage(event),\r\n    )\r\n  }\r\n\r\n  async handleMessage(event) {\r\n    const change = JSON.parse(event.data)\r\n    this.changes.unshift(change)\r\n    if (this.changes.length > this.maxItems) this.changes.pop()\r\n  }\r\n}\r\n\r\nexport default FeedData\r\n","import React, { useState, useEffect } from 'react'\r\nimport FeedData from '../Backend/FeedData'\r\n// eslint-disable-next-line\r\nimport style from '../style.css'\r\n\r\nfunction TestFeedData() {\r\n  const [feedData] = useState(new FeedData(30))\r\n  const [recentChanges, setRecentChanges] = useState({\r\n    items: feedData.changes,\r\n  })\r\n\r\n  useEffect(() => {\r\n    setInterval(() => setRecentChanges({ items: feedData.changes }), 1000)\r\n  }, [feedData.changes])\r\n\r\n  return (\r\n    <div>\r\n      <h3 class=\"text-blue text-left\">Most Recent Activity</h3>\r\n      <ul class=\"list-group\">\r\n        {recentChanges.items.map((item, index) => (\r\n          <li class=\"list-group-item text-left\" key={index}>\r\n            {`User ${item.user} did action ${item.type} ${\r\n              item.title\r\n            } ${getTimeDifference(item.timestamp)} seconds ago`}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst getTimeDifference = toCompare =>\r\n  Math.round(Math.abs(new Date().getTime() / 1000 - toCompare))\r\n\r\nexport default TestFeedData\r\n","import Card from 'react-bootstrap/Card'\r\nimport React, { Component } from 'react'\r\n\r\nclass GraphCard extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: this.props.history,\r\n      title: this.props.title,\r\n      pageLink: this.props.pageLink,\r\n      graph: this.props.graph,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card onClick={this.onClick} tag=\"a\" className=\"graph-card\">\r\n        <Card.Body>\r\n          <Card.Title className=\"card-title\">{this.state.title}</Card.Title>\r\n          {this.state.graph}\r\n        </Card.Body>\r\n      </Card>\r\n    )\r\n  }\r\n\r\n  onClick = () => {\r\n    this.state.history.push(this.state.pageLink)\r\n  }\r\n}\r\n\r\nexport default GraphCard\r\n","import { ResponsiveLine } from '@nivo/line'\r\nimport React, { Component } from 'react'\r\n\r\nclass SampleGraph extends Component {\r\n  render = () => (\r\n    <div className=\"Graph-Container-Card\">\r\n      <ResponsiveLine\r\n        data={data}\r\n        margin={{ top: 5, right: 55, bottom: 25, left: 30 }}\r\n        xScale={{ type: 'point' }}\r\n        yScale={{\r\n          type: 'linear',\r\n          min: 'auto',\r\n          max: 'auto',\r\n          stacked: true,\r\n          reverse: false,\r\n        }}\r\n        axisTop={null}\r\n        axisRight={null}\r\n        axisBottom={{\r\n          orient: 'bottom',\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: 'transportation',\r\n          legendOffset: 36,\r\n          legendPosition: 'middle',\r\n        }}\r\n        axisLeft={{\r\n          orient: 'left',\r\n          tickSize: 5,\r\n          tickPadding: 5,\r\n          tickRotation: 0,\r\n          legend: 'count',\r\n          legendOffset: -40,\r\n          legendPosition: 'middle',\r\n        }}\r\n        colors={{ scheme: 'accent' }}\r\n        pointSize={5}\r\n        pointColor={{ theme: 'background' }}\r\n        pointBorderWidth={2}\r\n        pointBorderColor={{ from: 'serieColor' }}\r\n        pointLabel=\"y\"\r\n        pointLabelYOffset={-12}\r\n        useMesh={true}\r\n        legends={[\r\n          {\r\n            anchor: 'bottom-right',\r\n            direction: 'column',\r\n            justify: false,\r\n            translateX: 100,\r\n            translateY: 0,\r\n            itemsSpacing: 0,\r\n            itemDirection: 'left-to-right',\r\n            itemWidth: 80,\r\n            itemHeight: 20,\r\n            itemOpacity: 0.75,\r\n            symbolSize: 12,\r\n            symbolShape: 'circle',\r\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\r\n            effects: [\r\n              {\r\n                on: 'hover',\r\n                style: {\r\n                  itemBackground: 'rgba(0, 0, 0, .03)',\r\n                  itemOpacity: 1,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst data = [\r\n  {\r\n    id: 'japan',\r\n    color: 'hsl(187, 70%, 50%)',\r\n    data: [\r\n      {\r\n        x: 'plane',\r\n        y: 200,\r\n      },\r\n      {\r\n        x: 'helicopter',\r\n        y: 90,\r\n      },\r\n      {\r\n        x: 'boat',\r\n        y: 112,\r\n      },\r\n      {\r\n        x: 'train',\r\n        y: 2,\r\n      },\r\n      {\r\n        x: 'subway',\r\n        y: 271,\r\n      },\r\n      {\r\n        x: 'bus',\r\n        y: 300,\r\n      },\r\n      {\r\n        x: 'car',\r\n        y: 142,\r\n      },\r\n      {\r\n        x: 'moto',\r\n        y: 197,\r\n      },\r\n      {\r\n        x: 'bicycle',\r\n        y: 107,\r\n      },\r\n      {\r\n        x: 'horse',\r\n        y: 140,\r\n      },\r\n      {\r\n        x: 'skateboard',\r\n        y: 279,\r\n      },\r\n      {\r\n        x: 'others',\r\n        y: 229,\r\n      },\r\n    ],\r\n  },\r\n]\r\n\r\nexport default SampleGraph\r\n","import React, { Component } from 'react'\r\nimport { ResponsiveBar } from '@nivo/bar'\r\n\r\nclass SimpleBarGraph extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loaded: false,\r\n      data: null,\r\n      fullGraph: this.props.fullGraph,\r\n    }\r\n\r\n    this.loadData()\r\n  }\r\n\r\n  tooltip = function(click, url) {\r\n    return (\r\n      <div className=\"iframe-container\">\r\n        <iframe\r\n          src={url + click.indexValue}\r\n          className=\"iframe\"\r\n          title=\"tooltip-option-2\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  loadData = async () => {\r\n    let getData = this.props.settings.getData.bind(this)\r\n    let data = await getData()\r\n    let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\r\n    this.setState({\r\n      loaded: true,\r\n      data: smlData,\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshInterval = setInterval(async () => {\r\n      let method = this.props.settings.refreshMethod.bind(this)\r\n      await method()\r\n    }, this.props.settings.refreshTime)\r\n  }\r\n\r\n  render() {\r\n    let margin = {}\r\n    let label = null\r\n    let classname = ''\r\n    let onClick = null\r\n    let clickable = false\r\n    let tooltip = null\r\n    if (this.state.fullGraph) {\r\n      margin = { top: 5, right: 30, bottom: 80, left: 80 }\r\n      label = true\r\n      classname = 'full-graph-container'\r\n      if (this.props.settings.onClick) {\r\n        onClick = this.props.settings.onClick\r\n        clickable = true\r\n      }\r\n      if (this.props.settings.tooltip) {\r\n        tooltip = this.props.settings.tooltip.bind(this)\r\n      }\r\n    } else {\r\n      margin = { top: 0, right: 0, bottom: 0, left: 0 }\r\n      label = false\r\n      classname = 'Graph-Container-Card'\r\n    }\r\n    return (\r\n      <div>\r\n        {!this.state.loaded ? (\r\n          'Loading...'\r\n        ) : (\r\n          <div className={classname}>\r\n            <ResponsiveBar\r\n              data={this.state.data}\r\n              keys={this.props.settings.keys}\r\n              indexBy={this.props.settings.index}\r\n              margin={margin}\r\n              padding={0.3}\r\n              colors={{ scheme: this.props.settings.colors }}\r\n              colorBy=\"index\"\r\n              borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n              axisTop={null}\r\n              axisRight={null}\r\n              axisBottom={{\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 30,\r\n                legend: this.props.settings.xAxis,\r\n                legendPosition: 'start',\r\n                legendOffset: 40,\r\n              }}\r\n              axisLeft={{\r\n                tickSize: 5,\r\n                tickPadding: 5,\r\n                tickRotation: 0,\r\n                legend: this.props.settings.yAxis,\r\n                legendPosition: 'middle',\r\n                legendOffset: -60,\r\n              }}\r\n              enableLabel={label}\r\n              onClick={clickable ? onClick : function() {}}\r\n              animate={label}\r\n              isInteractive={label}\r\n              motionStiffness={90}\r\n              motionDamping={15}\r\n              tooltip={tooltip}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SimpleBarGraph\r\n","import React, { Component } from 'react'\r\nimport TitleContainer from '../Components/TitleContainer'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Navbar from '../Components/Navbar'\r\n\r\nclass GraphPage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      history: this.props.history,\r\n      graph: this.props.graph,\r\n      title: this.props.name,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"HomePage\">\r\n        <Navbar history={this.state.history} />\r\n        <TitleContainer title=\"\" subtitle={this.props.name}></TitleContainer>\r\n        {this.state.graph}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GraphPage\r\n","const API_ENDPOINT = 'https://www.wikidata.org/w/api.php'\r\nconst MAX_QUERY_SIZE = 50\r\nconst NUM_RETRIES = 5\r\n\r\n/**\r\n * @typedef {Object} User\r\n * @property {number} userid - The user's id\r\n * @property {number} name - The user's name\r\n * @property {number} editcount - The number of edits the user did\r\n * @property {number} recentactions - The number of actions a user did within\r\n *           30 days\r\n * @property {Array} groups - An array of strings which contains the groups\r\n *           the user belongs in. For example if the user contains \"bot\", it is\r\n *           a non human user\r\n */\r\n\r\n/**\r\n * Returns a list of 500 users who were recently active within 30 days which is\r\n * sorted by the most edits in descending order\r\n *\r\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\r\n *          objects\r\n */\r\nexport const getMostEditsUsers = async () => {\r\n  const compare = (a, b) => b.editcount - a.editcount\r\n  const params = {\r\n    action: 'query',\r\n    format: 'json',\r\n    list: 'allusers',\r\n    auprop: 'editcount|groups',\r\n    aulimit: 'max',\r\n    auwitheditsonly: '1',\r\n    auactiveusers: '1',\r\n  }\r\n  const users = query(params, NUM_RETRIES)\r\n    .then(data => data.query.allusers)\r\n    .then(users => users.sort(compare))\r\n  return users\r\n}\r\n\r\n/**\r\n * Returns a list of 500 users who were recently active within 30 days which is\r\n * sorted by the most recent actions in descending order\r\n *\r\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\r\n *          objects\r\n */\r\nexport const getMostActiveUsers = async () => {\r\n  const compare = (a, b) => b.recentactions - a.recentactions\r\n  const params = {\r\n    action: 'query',\r\n    format: 'json',\r\n    list: 'allusers',\r\n    auprop: 'editcount|groups',\r\n    aulimit: 'max',\r\n    auwitheditsonly: '1',\r\n    auactiveusers: '1',\r\n  }\r\n  const users = query(params, NUM_RETRIES)\r\n    .then(data => data.query.allusers)\r\n    .then(users => users.sort(compare))\r\n  return users\r\n}\r\n\r\n/**\r\n * @typedef {Object} PageInfo\r\n * @property {string} id - The id of the page\r\n * @property {actions} actions - Number of actions which has been performed on\r\n *           that page\r\n * @property {string} title - The title of the page\r\n */\r\n\r\n/**\r\n * Returns an array of most active pages from recent changes feed\r\n *\r\n * @param {string} prevTimestamp - Previous timestamp when the function was\r\n *        last called\r\n * @return {Promise<PageInfo[] | string>}\r\n */\r\nexport const getMostActivePages = async prevTimestamp => {\r\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\r\n  const activePages = recentChanges\r\n    .then(recentChanges => countPageOccurances(recentChanges))\r\n    .then(pageTitles => {\r\n      const ids = pageTitles.map(({ id }) => id)\r\n      convertIDs(ids).then(convertedIDs => {\r\n        pageTitles.forEach(pageTitle => {\r\n          pageTitle.title = convertedIDs[pageTitle.id]\r\n        })\r\n      })\r\n      return pageTitles\r\n    })\r\n  return [await activePages, newTimestamp]\r\n}\r\n\r\n/**\r\n * Returns an array of most users pages from recent changes feed\r\n *\r\n * @param {string} prevTimestamp - Previous timestamp when the function was\r\n *        last called\r\n * @return {Promise<User[] | string>}\r\n */\r\nexport const getRecentActiveUsers = async prevTimestamp => {\r\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\r\n  const activeUsers = recentChanges.then(activeUsers => countUsers(activeUsers))\r\n  return [await activeUsers, newTimestamp]\r\n}\r\n\r\n/**\r\n * Returns a map where the key is the id and the value is the associated label\r\n *\r\n * @param {Array<string>} ids - An array of ids to retrieve the label of\r\n * @return {Promise<Map<string, string>>}\r\n */\r\nexport const convertIDs = async ids => {\r\n  const converted = {}\r\n  let batches = null\r\n  if (ids instanceof Array) batches = createBatch(ids, MAX_QUERY_SIZE)\r\n  else batches = [[ids]]\r\n  const results = batches.map(async batch => {\r\n    const titlesString = batch.join('|')\r\n    const params = {\r\n      action: 'wbgetentities',\r\n      format: 'json',\r\n      ids: titlesString,\r\n      props: 'labels',\r\n      languages: 'en',\r\n    }\r\n    return query(params, NUM_RETRIES)\r\n      .then(data => data)\r\n      .then(data => data.entities)\r\n      .then(entities => {\r\n        batch.forEach(id => {\r\n          const labels = entities[id].labels\r\n          if (labels && labels['en']) converted[id] = labels['en'].value\r\n        })\r\n      })\r\n      .catch(err => null)\r\n  })\r\n  await Promise.all(results)\r\n  return converted\r\n}\r\n\r\n// ~ Helper Functions ---------------------------------------------------------\r\n\r\n/**\r\n * Returns a the response of a query to the Wikidata API endpoint\r\n *\r\n * @param {Object} params - Object of parameters to use when querying\r\n * @param {number} n - Number of times to retry if failure occurs\r\n * @return {Promise<Object>}\r\n */\r\nconst query = async (params, n) => {\r\n  try {\r\n    const paramsString = new URLSearchParams(params).toString()\r\n    const url = API_ENDPOINT + '?' + paramsString + '&origin=*'\r\n    return await fetch(url).then(response => response.json())\r\n  } catch (err) {\r\n    if (n === 1) throw err\r\n    return await query(params, n - 1)\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} recentChanges\r\n * @property {number} ns\r\n * @property {number} old_revid - The old revision id\r\n * @property {number} pageid - The page id\r\n * @property {number} rcid - The recent change id\r\n * @property {number} revid - The current revision id\r\n * @property {string} timestamp - Timestamp of change\r\n * @property {string} title - Title of the page changed\r\n * @property {string} type - Type of action e.g. \"new\", \"edit\"\r\n * @property {string} user - The username of the editor\r\n */\r\n\r\n/**\r\n * Queries the API for the most recent changes\r\n *\r\n * @param {string} prevTimestamp - Previous timestamp when the function was\r\n *        last called\r\n * @return {Array<Promise<recentChanges[]> | string>}\r\n */\r\nconst queryRecentChanges = prevTimestamp => {\r\n  let tmpTimestamp = new Date()\r\n  const newTimestamp = tmpTimestamp.toISOString()\r\n  tmpTimestamp = tmpTimestamp - 1000\r\n  tmpTimestamp = new Date(tmpTimestamp).toISOString()\r\n  const params = {\r\n    action: 'query',\r\n    format: 'json',\r\n    list: 'recentchanges',\r\n    rcprop: 'title|ids|timestamp|user',\r\n    rclimit: 'max',\r\n    rcstart: tmpTimestamp,\r\n    rcend: prevTimestamp,\r\n  }\r\n  const recentChanges = query(params, NUM_RETRIES).then(\r\n    data => data.query.recentchanges\r\n  )\r\n  return [recentChanges, newTimestamp]\r\n}\r\n\r\n/**\r\n * Returns the number of times a page appeared on the recent changes feed sorted by\r\n * number of actions done on the page\r\n *\r\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\r\n */\r\nconst countPageOccurances = recentChanges => {\r\n  const compare = (a, b) => b.actions - a.actions\r\n  const titleCounts = {}\r\n  recentChanges.forEach(change => {\r\n    const actions = titleCounts[change.title] || 0\r\n    titleCounts[change.title] = actions + 1\r\n  })\r\n  const titles = Object.entries(titleCounts).map(([id, actions]) => ({\r\n    id,\r\n    actions,\r\n  }))\r\n  titles.sort(compare)\r\n  return titles\r\n}\r\n\r\n/**\r\n * Returns the number of times a user appeared on the recent changes feed sorted by\r\n * number of actions done by that user\r\n *\r\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\r\n */\r\nconst countUsers = recentChanges => {\r\n  const compare = (a, b) => b.actions - a.actions\r\n  const userCounts = {}\r\n  recentChanges.forEach(change => {\r\n    const user = change.user\r\n    const numActions = userCounts[user] || 0\r\n    userCounts[user] = numActions + 1\r\n  })\r\n  const users = Object.entries(userCounts).map(([username, actions]) => ({\r\n    username,\r\n    actions,\r\n  }))\r\n  users.sort(compare)\r\n  return users\r\n}\r\n\r\n/**\r\n * Splits up an array into smaller arrays\r\n *\r\n * @param {Array} array - Array to create batches from\r\n * @param {number} size - Batch size\r\n * @return {Array} batches - An array containing the batches which are of\r\n *         length size\r\n */\r\nconst createBatch = (array, size) => {\r\n  const batches = []\r\n  while (array.length > 0) {\r\n    batches.push(array.splice(0, size))\r\n  }\r\n  return batches\r\n}\r\n","import React, { Component } from 'react'\r\nimport GraphPage from './GraphPage'\r\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\r\nimport { getMostActiveUsers } from '../Backend/APIWrapper'\r\n\r\nexport const MostActiveUsersGraphSettings = {\r\n  getData: async function() {\r\n    let data = await getMostActiveUsers()\r\n    return data\r\n  },\r\n  refreshTime: 2000,\r\n  refreshMethod: function() {\r\n    this.loadData()\r\n  },\r\n  keys: ['recentactions'],\r\n  index: 'name',\r\n  xAxis: 'users',\r\n  yAxis: 'recent actions',\r\n  colors: 'set3',\r\n  tooltip: function(click) {\r\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\r\n  },\r\n}\r\n\r\nclass MostActiveUsers extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: this.props.history,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GraphPage\r\n        graph={\r\n          <SimpleBarGraph\r\n            fullGraph={true}\r\n            settings={MostActiveUsersGraphSettings}\r\n          />\r\n        }\r\n        name={'Most Active Users'}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default MostActiveUsers\r\n","import React, { Component } from 'react'\r\nimport GraphPage from './GraphPage'\r\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\r\nimport { getMostActivePages } from '../Backend/APIWrapper'\r\n\r\n//This doesn't really work: currently, previous changes may get counted more than once.\r\n//It does look good though.\r\nexport const MostActivePagesGraphSettings = {\r\n  getData: async function() {\r\n    let [data, newTimestamp] = await getMostActivePages(\r\n      new Date().toISOString()\r\n    )\r\n    data = data.slice(0, 50)\r\n    this.setState({\r\n      fullData: data,\r\n      prevTimestamp: newTimestamp,\r\n    })\r\n    return data\r\n  },\r\n  refreshTime: 2000,\r\n  refreshMethod: async function() {\r\n    let [data, newTimestamp] = await getMostActivePages(\r\n      this.state.prevTimestamp\r\n    )\r\n    this.setState({ prevTimestamp: newTimestamp })\r\n    data = data.slice(0, 50)\r\n    if (this.state.fullData) {\r\n      let fullData = this.state.fullData\r\n      data.forEach(pageAdditions => {\r\n        let index = -1\r\n        for (let i = 0; i < fullData.length; i += 1) {\r\n          if (fullData[i].id === pageAdditions.id) {\r\n            index = i\r\n          }\r\n        }\r\n        if (index !== -1) {\r\n          fullData[index].actions += pageAdditions.actions\r\n        } else {\r\n          fullData.push(pageAdditions)\r\n        }\r\n      })\r\n      fullData.sort((a, b) => b.actions - a.actions)\r\n      fullData.slice(0, 50)\r\n      let smlData = fullData.slice(0, this.state.fullGraph ? 30 : 10)\r\n\r\n      this.setState({ fullData: fullData, data: smlData })\r\n    } else {\r\n      let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\r\n\r\n      this.setState({ data: smlData })\r\n    }\r\n  },\r\n  keys: ['actions'],\r\n  index: 'id',\r\n  xAxis: 'pages',\r\n  yAxis: 'actions',\r\n  colors: 'pastel1',\r\n  onClick: function(click) {\r\n    window.open('https://www.wikidata.org/wiki/' + click.indexValue, '_blank')\r\n  },\r\n  tooltip: function(click) {\r\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/')\r\n  },\r\n}\r\n\r\nclass UsersByMostEditsPage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: this.props.history,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GraphPage\r\n        graph={\r\n          <SimpleBarGraph\r\n            fullGraph={true}\r\n            settings={MostActivePagesGraphSettings}\r\n          />\r\n        }\r\n        name={'Most Active Pages'}\r\n      />\r\n    )\r\n  }\r\n}\r\nexport default UsersByMostEditsPage\r\n","import React, { Component } from 'react'\r\nimport GraphPage from './GraphPage'\r\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\r\nimport { getMostEditsUsers } from '../Backend/APIWrapper'\r\n\r\nexport const UsersByMostEditsGraphSettings = {\r\n  getData: async function() {\r\n    let data = await getMostEditsUsers()\r\n    return data\r\n  },\r\n  refreshTime: 2000,\r\n  refreshMethod: function() {\r\n    this.loadData()\r\n  },\r\n  keys: ['editcount'],\r\n  index: 'name',\r\n  xAxis: 'users',\r\n  yAxis: 'edit count',\r\n  colors: 'paired',\r\n  tooltip: function(click) {\r\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\r\n  },\r\n}\r\n\r\nclass UsersByMostEditsPage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      history: this.props.history,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GraphPage\r\n        graph={\r\n          <SimpleBarGraph\r\n            fullGraph={true}\r\n            settings={UsersByMostEditsGraphSettings}\r\n          />\r\n        }\r\n        name={'Users By Most Edits'}\r\n      />\r\n    )\r\n  }\r\n}\r\nexport default UsersByMostEditsPage\r\n","import React, { Component } from 'react'\r\nimport Navbar from '../Components/Navbar'\r\nimport GraphCard from '../Components/GraphCard'\r\nimport TestFeedData from '../Examples/TestFeedData'\r\nimport CardDeck from 'react-bootstrap/CardDeck'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport SampleGraph from '../Components/SampleGraph'\r\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\r\nimport { MostActiveUsersGraphSettings } from './MostActiveUsers'\r\nimport { MostActivePagesGraphSettings } from './MostActivePages'\r\nimport { UsersByMostEditsGraphSettings } from './UsersByMostEditsPage'\r\n\r\nclass HomePage extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      history: this.props.history,\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"HomePage\">\r\n        <Navbar />\r\n        <div class=\"row justify-content-left text-dark\">\r\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-4\">\r\n            <div class=\"feedContainer\">\r\n              <TestFeedData></TestFeedData>\r\n            </div>\r\n          </div>\r\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-8\">\r\n            <div className=\"deck-container\">\r\n              <CardDeck className=\"deck\">\r\n                <GraphCard\r\n                  title=\"Users by most edits\"\r\n                  pageLink=\"users-by-most-edits\"\r\n                  history={this.state.history}\r\n                  graph={\r\n                    <SimpleBarGraph\r\n                      fullGraph={false}\r\n                      settings={UsersByMostEditsGraphSettings}\r\n                    />\r\n                  }\r\n                />\r\n                <GraphCard\r\n                  title=\"Most Active Users\"\r\n                  pageLink=\"most-active-users\"\r\n                  history={this.state.history}\r\n                  graph={\r\n                    <SimpleBarGraph\r\n                      fullGraph={false}\r\n                      settings={MostActiveUsersGraphSettings}\r\n                    />\r\n                  }\r\n                />\r\n              </CardDeck>\r\n              <CardDeck className=\"deck\">\r\n                <GraphCard\r\n                  title=\"Most Active Pages\"\r\n                  pageLink=\"most-active-pages\"\r\n                  history={this.state.history}\r\n                  graph={\r\n                    <SimpleBarGraph\r\n                      fullGraph={false}\r\n                      settings={MostActivePagesGraphSettings}\r\n                    />\r\n                  }\r\n                />\r\n                <GraphCard\r\n                  title=\"Sample Graph: link to home\"\r\n                  pageLink=\"\"\r\n                  history={this.state.history}\r\n                  graph={<SampleGraph />}\r\n                />\r\n              </CardDeck>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\r\nimport HomePage from './Pages/HomePage'\r\nimport history from './Utils/History'\r\nimport TestFeedData from './Examples/TestFeedData'\r\nimport TestPage from './Pages/TestPage'\r\nimport UsersByMostEditsPage from './Pages/UsersByMostEditsPage'\r\nimport MostActiveUsers from './Pages/MostActiveUsers'\r\nimport MostActivePages from './Pages/MostActivePages'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router history={history}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={HomePage} />\r\n          <Route exact path=\"/page\" component={TestPage} />\r\n          <Route\r\n            exact\r\n            path=\"/users-by-most-edits\"\r\n            component={UsersByMostEditsPage}\r\n          />\r\n          <Route exact path=\"/most-active-users\" component={MostActiveUsers} />\r\n          <Route exact path=\"/most-active-pages\" component={MostActivePages} />\r\n          <Route exact path=\"/feed\" component={TestFeedData} />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}