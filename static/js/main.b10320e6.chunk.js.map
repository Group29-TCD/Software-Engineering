{"version":3,"sources":["Components/TitleContainer.js","Components/Navbar.jsx","Components/HomeNavContainer.js","Components/HomeStats.js","Pages/HomePage.jsx","Utils/History.js","Backend/FeedData.js","Examples/TestFeedData.jsx","Components/GraphCard.jsx","Components/SampleGraph.jsx","Components/SimpleBarGraph.jsx","Pages/GraphPage.jsx","Backend/APIWrapper.js","Pages/MostActiveUsers.jsx","Pages/MostActivePages.jsx","Pages/UsersByMostEditsPage.jsx","Pages/TestPage.jsx","App.js","serviceWorker.js","index.js"],"names":["TitleContainer","className","this","props","title","subtitle","React","Component","NavbarLocal","state","history","activePage","window","location","href","Navbar","Collapse","Nav","Link","as","to","endsWith","HomeNavContainer","btnImage","btnTitle","btnLink","type","btnText","HomeStats","text","errorCode","updateStats","$","ajax","url","success","response","html","find","error","setState","intervalID","setInterval","clearInterval","id","HomePage","createBrowserHistory","FeedData","maxItems","eventSource","EventSource","changes","addEventListener","event","handleMessage","change","JSON","parse","data","unshift","length","pop","getTimeDifference","toCompare","Math","round","abs","Date","getTime","TestFeedData","useState","feedData","items","recentChanges","setRecentChanges","useEffect","class","map","item","index","key","user","timestamp","GraphCard","onClick","push","pageLink","graph","Card","tag","Body","Title","SampleGraph","render","margin","top","right","bottom","left","xScale","yScale","min","max","stacked","reverse","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legend","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","theme","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","justify","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","color","x","y","SimpleBarGraph","tooltip","click","src","indexValue","loadData","a","async","getData","settings","bind","smlData","slice","fullGraph","loaded","refreshInterval","method","refreshMethod","refreshTime","label","classname","clickable","keys","indexBy","padding","colorBy","borderColor","modifiers","xAxis","yAxis","enableLabel","animate","isInteractive","motionStiffness","motionDamping","GraphPage","name","getMostEditsUsers","compare","b","editcount","users","query","action","format","list","auprop","aulimit","auwitheditsonly","auactiveusers","then","allusers","sort","getMostActiveUsers","recentactions","getMostActivePages","prevTimestamp","queryRecentChanges","newTimestamp","activePages","countPageOccurances","pageTitles","ids","convertIDs","convertedIDs","forEach","pageTitle","converted","batches","Array","createBatch","results","batch","titlesString","join","params","languages","entities","labels","value","catch","err","Promise","all","n","paramsString","URLSearchParams","toString","API_ENDPOINT","fetch","json","tmpTimestamp","toISOString","rcprop","rclimit","rcstart","rcend","recentchanges","titleCounts","actions","titles","Object","entries","array","size","splice","MostActiveUsersGraphSettings","MostActiveUsers","MostActivePagesGraphSettings","fullData","pageAdditions","i","open","UsersByMostEditsPage","UsersByMostEditsGraphSettings","CardDeck","App","exact","path","component","TestPage","MostActivePages","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b10320e6.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass TitleContainer extends React.Component {\n    render() {\n        return(\n                <div className=\"col-md-6 text-left\">\n                     <h1 className=\"text-left  display-3\"><b>{this.props.title}</b></h1>\n                     <h4>{this.props.subtitle}</h4  >\n                  </div>\n        )\n    }\n}\n\nexport default TitleContainer\n","import React, { Component } from 'react'\nimport { Nav, Navbar } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nclass NavbarLocal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { history: this.props.history }\n  }\n  render() {\n    // var isActive = this.context.router.route.location.pathname\n    let activePage = window.location.href\n    return (\n      <Navbar>\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link\n              as={Link}\n              to=\"/\"\n              className={\n                activePage.endsWith('/') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Home\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/page\"\n              className={\n                activePage.endsWith('/page') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Page\n            </Nav.Link>\n            <Nav.Link\n              as={Link}\n              to=\"/feed\"\n              className={\n                activePage.endsWith('/feed') ? 'nav-link--active' : 'nav-link'\n              }\n            >\n              Feed\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n  }\n}\n\nexport default NavbarLocal\n","import React, { Component } from \"react\";\nimport { Link } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass HomeNavContainer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"col-md-2 inline\">\n\t\t\t\t<h1>{ this.props.btnImage }</h1>\n\t\t\t\t<p className=\"font-weight-bold\">{ this.props.btnTitle }</p>\n\t\t\t\t<Link to={ this.props.btnLink }>\n\t\t\t\t\t <button type=\"button\" className=\"align-bottom btn btn-outline-primary\">{ this.props.btnText }</button>\n\t\t\t\t</Link>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HomeNavContainer;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\n\nclass HomeStats extends Component {\n\n\t state = {\n\t\t text: 'something',\n\t\t errorCode: '',\n\t }\n\n\t componentDidMount() {\n\t  this.updateStats();\n\t  this.intervalID = setInterval(\n\t    () => this.updateStats(),\n\t    10000\n\t  );\n\t}\n\tcomponentWillUnmount() {\n\t  clearInterval(this.intervalID);\n\t}\n\n     updateStats = () => {\n\t\t$.ajax({\n  \t\t  url: \"https://cors-anywhere.herokuapp.com/https://www.wikidata.org/wiki/Special:Statistics\",\n  \t\t  type: 'GET',\n  \t\t  success: function(response) {\n\t\t\t  $(\"#div1\").html($($(response).find('.mw-statistics-articles')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div2\").html($($(response).find('.mw-statistics-edits')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div3\").html($($(response).find('.mw-statistics-users')).find('.mw-statistics-numbers'));\n\t  \t\t  $(\"#div4\").html($($(response).find('.mw-statistics-users-active')).find('.mw-statistics-numbers'));\n\t\t  },\n\t\t error: this.setState({errorCode: \"Could not fetch data\"})\n  \t   });\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"row\">\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div1\">{ this.state.errorCode }</p>Items</div>\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div2\">{ this.state.errorCode }</p>Edits</div>\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div3\">{ this.state.errorCode }</p>Users</div>\n\t\t\t\t<div className=\"col-md-3 text-left\"><p id=\"div4\">{ this.state.errorCode }</p>Active Users</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default HomeStats;\n","import React, { Component } from 'react'\nimport TitleContainer from '../Components/TitleContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from '../Components/Navbar'\nimport HomeNavContainer from '../Components/HomeNavContainer'\nimport HomeStatsContainer from '../Components/HomeStats'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = { history: this.props.history }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <div className=\"row margin-right: -15px margin-left: -15px\">\n           <TitleContainer\n             title=\"Wikidata Live\"\n             subtitle=\"A web app to visualise recent changes to Wikidata in quasi real time.\"\n           ></TitleContainer>\n           <HomeNavContainer\n             btnImage=\"W\"\n             btnTitle=\"Wikidata Feed\"\n             btnText=\"Wikidata\"\n             btnLink=\"/feed\"\n           ></HomeNavContainer>\n           <HomeNavContainer\n             btnImage=\"M\"\n             btnTitle=\"Graph Data\"\n             btnText=\"Graphs\"\n             btnLink=\"/page\"\n           ></HomeNavContainer>\n           <HomeNavContainer\n             btnImage=\"👤\"\n             btnTitle=\"User Data\"\n             btnText=\"Users\"\n             btnLink=\"/\"\n           ></HomeNavContainer>\n        </div>\n        <HomeStatsContainer />\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import { createBrowserHistory } from \"history\";\n\nexport default createBrowserHistory();\n","const URL = 'https://stream.wikimedia.org/v2/stream/recentchange'\n\n/** Class which wraps the Wikidata API recent changes feed */\nclass FeedData {\n  /**\n   * Create a new feed data object\n   *\n   * @param {number} maxItems - the maximum number of items to keep in the\n   *        feed.\n   */\n  constructor(maxItems) {\n    this.eventSource = new EventSource(URL)\n    this.changes = []\n    this.maxItems = maxItems\n    this.eventSource.addEventListener('message', (event) =>\n      this.handleMessage(event),\n    )\n  }\n\n  async handleMessage(event) {\n    const change = JSON.parse(event.data)\n    this.changes.unshift(change)\n    if (this.changes.length > this.maxItems) this.changes.pop()\n  }\n}\n\nexport default FeedData\n","import React, { useState, useEffect } from 'react'\nimport FeedData from '../Backend/FeedData'\n// eslint-disable-next-line\nimport style from '../style.css'\n\nfunction TestFeedData() {\n  const [feedData] = useState(new FeedData(30))\n  const [recentChanges, setRecentChanges] = useState({\n    items: feedData.changes,\n  })\n\n  useEffect(() => {\n    setInterval(() => setRecentChanges({ items: feedData.changes }), 1000)\n  }, [feedData.changes])\n\n  return (\n    <div>\n      <h3 class=\"text-blue text-left\">Most Recent Activity</h3>\n      <ul class=\"list-group\">\n        {recentChanges.items.map((item, index) => (\n          <li class=\"list-group-item text-left\" key={index}>\n            {`User ${item.user} did action ${item.type} ${\n              item.title\n            } ${getTimeDifference(item.timestamp)} seconds ago`}\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n}\n\nconst getTimeDifference = toCompare =>\n  Math.round(Math.abs(new Date().getTime() / 1000 - toCompare))\n\nexport default TestFeedData\n","import Card from 'react-bootstrap/Card'\nimport React, { Component } from 'react'\n\nclass GraphCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n      title: this.props.title,\n      pageLink: this.props.pageLink,\n      graph: this.props.graph,\n    }\n  }\n\n  render() {\n    return (\n      <Card onClick={this.onClick} tag=\"a\" className=\"graph-card\">\n        <Card.Body>\n          <Card.Title className=\"card-title\">{this.state.title}</Card.Title>\n          {this.state.graph}\n        </Card.Body>\n      </Card>\n    )\n  }\n\n  onClick = () => {\n    this.state.history.push(this.state.pageLink)\n  }\n}\n\nexport default GraphCard\n","import { ResponsiveLine } from '@nivo/line'\nimport React, { Component } from 'react'\n\nclass SampleGraph extends Component {\n  render = () => (\n    <div className=\"Graph-Container-Card\">\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 5, right: 55, bottom: 25, left: 30 }}\n        xScale={{ type: 'point' }}\n        yScale={{\n          type: 'linear',\n          min: 'auto',\n          max: 'auto',\n          stacked: true,\n          reverse: false,\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          orient: 'bottom',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'transportation',\n          legendOffset: 36,\n          legendPosition: 'middle',\n        }}\n        axisLeft={{\n          orient: 'left',\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'count',\n          legendOffset: -40,\n          legendPosition: 'middle',\n        }}\n        colors={{ scheme: 'accent' }}\n        pointSize={5}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabel=\"y\"\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[\n          {\n            anchor: 'bottom-right',\n            direction: 'column',\n            justify: false,\n            translateX: 100,\n            translateY: 0,\n            itemsSpacing: 0,\n            itemDirection: 'left-to-right',\n            itemWidth: 80,\n            itemHeight: 20,\n            itemOpacity: 0.75,\n            symbolSize: 12,\n            symbolShape: 'circle',\n            symbolBorderColor: 'rgba(0, 0, 0, .5)',\n            effects: [\n              {\n                on: 'hover',\n                style: {\n                  itemBackground: 'rgba(0, 0, 0, .03)',\n                  itemOpacity: 1,\n                },\n              },\n            ],\n          },\n        ]}\n      />\n    </div>\n  )\n}\n\nconst data = [\n  {\n    id: 'japan',\n    color: 'hsl(187, 70%, 50%)',\n    data: [\n      {\n        x: 'plane',\n        y: 200,\n      },\n      {\n        x: 'helicopter',\n        y: 90,\n      },\n      {\n        x: 'boat',\n        y: 112,\n      },\n      {\n        x: 'train',\n        y: 2,\n      },\n      {\n        x: 'subway',\n        y: 271,\n      },\n      {\n        x: 'bus',\n        y: 300,\n      },\n      {\n        x: 'car',\n        y: 142,\n      },\n      {\n        x: 'moto',\n        y: 197,\n      },\n      {\n        x: 'bicycle',\n        y: 107,\n      },\n      {\n        x: 'horse',\n        y: 140,\n      },\n      {\n        x: 'skateboard',\n        y: 279,\n      },\n      {\n        x: 'others',\n        y: 229,\n      },\n    ],\n  },\n]\n\nexport default SampleGraph\n","import React, { Component } from 'react'\nimport { ResponsiveBar } from '@nivo/bar'\n\nclass SimpleBarGraph extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loaded: false,\n      data: null,\n      fullGraph: this.props.fullGraph,\n    }\n\n    this.loadData()\n  }\n\n  tooltip = function(click, url) {\n    return (\n      <div className=\"iframe-container\">\n        <iframe\n          src={url + click.indexValue}\n          className=\"iframe\"\n          title=\"tooltip-option-2\"\n        />\n      </div>\n    )\n  }\n\n  loadData = async () => {\n    let getData = this.props.settings.getData.bind(this)\n    let data = await getData()\n    let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n    this.setState({\n      loaded: true,\n      data: smlData,\n    })\n  }\n\n  componentDidMount() {\n    this.refreshInterval = setInterval(async () => {\n      let method = this.props.settings.refreshMethod.bind(this)\n      await method()\n    }, this.props.settings.refreshTime)\n  }\n\n  render() {\n    let margin = {}\n    let label = null\n    let classname = ''\n    let onClick = null\n    let clickable = false\n    let tooltip = null\n    if (this.state.fullGraph) {\n      margin = { top: 5, right: 30, bottom: 80, left: 80 }\n      label = true\n      classname = 'full-graph-container'\n      if (this.props.settings.onClick) {\n        onClick = this.props.settings.onClick\n        clickable = true\n      }\n      if (this.props.settings.tooltip) {\n        tooltip = this.props.settings.tooltip.bind(this)\n      }\n    } else {\n      margin = { top: 0, right: 0, bottom: 0, left: 0 }\n      label = false\n      classname = 'Graph-Container-Card'\n    }\n    return (\n      <div>\n        {!this.state.loaded ? (\n          'Loading...'\n        ) : (\n          <div className={classname}>\n            <ResponsiveBar\n              data={this.state.data}\n              keys={this.props.settings.keys}\n              indexBy={this.props.settings.index}\n              margin={margin}\n              padding={0.3}\n              colors={{ scheme: this.props.settings.colors }}\n              colorBy=\"index\"\n              borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n              axisTop={null}\n              axisRight={null}\n              axisBottom={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 30,\n                legend: this.props.settings.xAxis,\n                legendPosition: 'start',\n                legendOffset: 40,\n              }}\n              axisLeft={{\n                tickSize: 5,\n                tickPadding: 5,\n                tickRotation: 0,\n                legend: this.props.settings.yAxis,\n                legendPosition: 'middle',\n                legendOffset: -60,\n              }}\n              enableLabel={label}\n              onClick={clickable ? onClick : function() {}}\n              animate={label}\n              isInteractive={label}\n              motionStiffness={90}\n              motionDamping={15}\n              tooltip={tooltip}\n            />\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default SimpleBarGraph\n","import React, { Component } from 'react'\nimport TitleContainer from '../Components/TitleContainer'\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Navbar from '../Components/Navbar'\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n      graph: this.props.graph,\n      title: this.props.name,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar history={this.state.history} />\n        <TitleContainer title=\"\" subtitle={this.props.name}></TitleContainer>\n        {this.state.graph}\n      </div>\n    )\n  }\n}\n\nexport default GraphPage\n","const API_ENDPOINT = 'https://www.wikidata.org/w/api.php'\nconst MAX_QUERY_SIZE = 50\nconst NUM_RETRIES = 5\n\n/**\n * @typedef {Object} User\n * @property {number} userid - The user's id\n * @property {number} name - The user's name\n * @property {number} editcount - The number of edits the user did\n * @property {number} recentactions - The number of actions a user did within\n *           30 days\n * @property {Array} groups - An array of strings which contains the groups\n *           the user belongs in. For example if the user contains \"bot\", it is\n *           a non human user\n */\n\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most edits in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostEditsUsers = async () => {\n  const compare = (a, b) => b.editcount - a.editcount\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n\n/**\n * Returns a list of 500 users who were recently active within 30 days which is\n * sorted by the most recent actions in descending order\n *\n * @returns {Promise<User[]>} - A Promise which resolves to an array of User\n *          objects\n */\nexport const getMostActiveUsers = async () => {\n  const compare = (a, b) => b.recentactions - a.recentactions\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'allusers',\n    auprop: 'editcount|groups',\n    aulimit: 'max',\n    auwitheditsonly: '1',\n    auactiveusers: '1',\n  }\n  const users = query(params, NUM_RETRIES)\n    .then(data => data.query.allusers)\n    .then(users => users.sort(compare))\n  return users\n}\n\n/**\n * @typedef {Object} PageInfo\n * @property {string} id - The id of the page\n * @property {actions} actions - Number of actions which has been performed on\n *           that page\n * @property {string} title - The title of the page\n */\n\n/**\n * Returns an array of most active pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<PageInfo[] | string>}\n */\nexport const getMostActivePages = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activePages = recentChanges\n    .then(recentChanges => countPageOccurances(recentChanges))\n    .then(pageTitles => {\n      const ids = pageTitles.map(({ id }) => id)\n      convertIDs(ids).then(convertedIDs => {\n        pageTitles.forEach(pageTitle => {\n          pageTitle.title = convertedIDs[pageTitle.id]\n        })\n      })\n      return pageTitles\n    })\n  return [await activePages, newTimestamp]\n}\n\n/**\n * Returns an array of most users pages from recent changes feed\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Promise<User[] | string>}\n */\nexport const getRecentActiveUsers = async prevTimestamp => {\n  const [recentChanges, newTimestamp] = queryRecentChanges(prevTimestamp)\n  const activeUsers = recentChanges.then(activeUsers => countUsers(activeUsers))\n  return [await activeUsers, newTimestamp]\n}\n\n/**\n * Returns a map where the key is the id and the value is the associated label\n *\n * @param {Array<string>} ids - An array of ids to retrieve the label of\n * @return {Promise<Map<string, string>>}\n */\nexport const convertIDs = async ids => {\n  const converted = {}\n  let batches = null\n  if (ids instanceof Array) batches = createBatch(ids, MAX_QUERY_SIZE)\n  else batches = [[ids]]\n  const results = batches.map(async batch => {\n    const titlesString = batch.join('|')\n    const params = {\n      action: 'wbgetentities',\n      format: 'json',\n      ids: titlesString,\n      props: 'labels',\n      languages: 'en',\n    }\n    return query(params, NUM_RETRIES)\n      .then(data => data)\n      .then(data => data.entities)\n      .then(entities => {\n        batch.forEach(id => {\n          const labels = entities[id].labels\n          if (labels && labels['en']) converted[id] = labels['en'].value\n        })\n      })\n      .catch(err => null)\n  })\n  await Promise.all(results)\n  return converted\n}\n\n// ~ Helper Functions ---------------------------------------------------------\n\n/**\n * Returns a the response of a query to the Wikidata API endpoint\n *\n * @param {Object} params - Object of parameters to use when querying\n * @param {number} n - Number of times to retry if failure occurs\n * @return {Promise<Object>}\n */\nconst query = async (params, n) => {\n  try {\n    const paramsString = new URLSearchParams(params).toString()\n    const url = API_ENDPOINT + '?' + paramsString + '&origin=*'\n    return await fetch(url).then(response => response.json())\n  } catch (err) {\n    if (n === 1) throw err\n    return await query(params, n - 1)\n  }\n}\n\n/**\n * @typedef {Object} recentChanges\n * @property {number} ns\n * @property {number} old_revid - The old revision id\n * @property {number} pageid - The page id\n * @property {number} rcid - The recent change id\n * @property {number} revid - The current revision id\n * @property {string} timestamp - Timestamp of change\n * @property {string} title - Title of the page changed\n * @property {string} type - Type of action e.g. \"new\", \"edit\"\n * @property {string} user - The username of the editor\n */\n\n/**\n * Queries the API for the most recent changes\n *\n * @param {string} prevTimestamp - Previous timestamp when the function was\n *        last called\n * @return {Array<Promise<recentChanges[]> | string>}\n */\nconst queryRecentChanges = prevTimestamp => {\n  let tmpTimestamp = new Date()\n  const newTimestamp = tmpTimestamp.toISOString()\n  tmpTimestamp = tmpTimestamp - 1000\n  tmpTimestamp = new Date(tmpTimestamp).toISOString()\n  const params = {\n    action: 'query',\n    format: 'json',\n    list: 'recentchanges',\n    rcprop: 'title|ids|timestamp|user',\n    rclimit: 'max',\n    rcstart: tmpTimestamp,\n    rcend: prevTimestamp,\n  }\n  const recentChanges = query(params, NUM_RETRIES).then(\n    data => data.query.recentchanges\n  )\n  return [recentChanges, newTimestamp]\n}\n\n/**\n * Returns the number of times a page appeared on the recent changes feed sorted by\n * number of actions done on the page\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countPageOccurances = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const titleCounts = {}\n  recentChanges.forEach(change => {\n    const actions = titleCounts[change.title] || 0\n    titleCounts[change.title] = actions + 1\n  })\n  const titles = Object.entries(titleCounts).map(([id, actions]) => ({\n    id,\n    actions,\n  }))\n  titles.sort(compare)\n  return titles\n}\n\n/**\n * Returns the number of times a user appeared on the recent changes feed sorted by\n * number of actions done by that user\n *\n * @param {recentChanges[]} recentChanges - The array of recent changes from a query\n */\nconst countUsers = recentChanges => {\n  const compare = (a, b) => b.actions - a.actions\n  const userCounts = {}\n  recentChanges.forEach(change => {\n    const user = change.user\n    const numActions = userCounts[user] || 0\n    userCounts[user] = numActions + 1\n  })\n  const users = Object.entries(userCounts).map(([username, actions]) => ({\n    username,\n    actions,\n  }))\n  users.sort(compare)\n  return users\n}\n\n/**\n * Splits up an array into smaller arrays\n *\n * @param {Array} array - Array to create batches from\n * @param {number} size - Batch size\n * @return {Array} batches - An array containing the batches which are of\n *         length size\n */\nconst createBatch = (array, size) => {\n  const batches = []\n  while (array.length > 0) {\n    batches.push(array.splice(0, size))\n  }\n  return batches\n}\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostActiveUsers } from '../Backend/APIWrapper'\n\nexport const MostActiveUsersGraphSettings = {\n  getData: async function() {\n    let data = await getMostActiveUsers()\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: function() {\n    this.loadData()\n  },\n  keys: ['recentactions'],\n  index: 'name',\n  xAxis: 'users',\n  yAxis: 'recent actions',\n  colors: 'set3',\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass MostActiveUsers extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActiveUsersGraphSettings}\n          />\n        }\n        name={'Most Active Users'}\n      />\n    )\n  }\n}\n\nexport default MostActiveUsers\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostActivePages } from '../Backend/APIWrapper'\n\n//This doesn't really work: currently, previous changes may get counted more than once.\n//It does look good though.\nexport const MostActivePagesGraphSettings = {\n  getData: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      new Date().toISOString()\n    )\n    data = data.slice(0, 50)\n    this.setState({\n      fullData: data,\n      prevTimestamp: newTimestamp,\n    })\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: async function() {\n    let [data, newTimestamp] = await getMostActivePages(\n      this.state.prevTimestamp\n    )\n    this.setState({ prevTimestamp: newTimestamp })\n    data = data.slice(0, 50)\n    if (this.state.fullData) {\n      let fullData = this.state.fullData\n      data.forEach(pageAdditions => {\n        let index = -1\n        for (let i = 0; i < fullData.length; i += 1) {\n          if (fullData[i].id === pageAdditions.id) {\n            index = i\n          }\n        }\n        if (index !== -1) {\n          fullData[index].actions += pageAdditions.actions\n        } else {\n          fullData.push(pageAdditions)\n        }\n      })\n      fullData.sort((a, b) => b.actions - a.actions)\n      fullData.slice(0, 50)\n      let smlData = fullData.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ fullData: fullData, data: smlData })\n    } else {\n      let smlData = data.slice(0, this.state.fullGraph ? 30 : 10)\n\n      this.setState({ data: smlData })\n    }\n  },\n  keys: ['actions'],\n  index: 'id',\n  xAxis: 'pages',\n  yAxis: 'actions',\n  colors: 'pastel1',\n  onClick: function(click) {\n    window.open('https://www.wikidata.org/wiki/' + click.indexValue, '_blank')\n  },\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/')\n  },\n}\n\nclass UsersByMostEditsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={MostActivePagesGraphSettings}\n          />\n        }\n        name={'Most Active Pages'}\n      />\n    )\n  }\n}\nexport default UsersByMostEditsPage\n","import React, { Component } from 'react'\nimport GraphPage from './GraphPage'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { getMostEditsUsers } from '../Backend/APIWrapper'\n\nexport const UsersByMostEditsGraphSettings = {\n  getData: async function() {\n    let data = await getMostEditsUsers()\n    return data\n  },\n  refreshTime: 2000,\n  refreshMethod: function() {\n    this.loadData()\n  },\n  keys: ['editcount'],\n  index: 'name',\n  xAxis: 'users',\n  yAxis: 'edit count',\n  colors: 'paired',\n  tooltip: function(click) {\n    return this.tooltip(click, 'https://www.wikidata.org/wiki/User:')\n  },\n}\n\nclass UsersByMostEditsPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <GraphPage\n        graph={\n          <SimpleBarGraph\n            fullGraph={true}\n            settings={UsersByMostEditsGraphSettings}\n          />\n        }\n        name={'Users By Most Edits'}\n      />\n    )\n  }\n}\nexport default UsersByMostEditsPage\n","import React, { Component } from 'react'\nimport Navbar from '../Components/Navbar'\nimport GraphCard from '../Components/GraphCard'\nimport TestFeedData from '../Examples/TestFeedData'\nimport CardDeck from 'react-bootstrap/CardDeck'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport SampleGraph from '../Components/SampleGraph'\nimport SimpleBarGraph from '../Components/SimpleBarGraph'\nimport { MostActiveUsersGraphSettings } from './MostActiveUsers'\nimport { MostActivePagesGraphSettings } from './MostActivePages'\nimport { UsersByMostEditsGraphSettings } from './UsersByMostEditsPage'\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      history: this.props.history,\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"HomePage\">\n        <Navbar />\n        <div class=\"row justify-content-left text-dark\">\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-4\">\n            <div class=\"feedContainer\">\n              <TestFeedData></TestFeedData>\n            </div>\n          </div>\n          <div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-8\">\n            <div className=\"deck-container\">\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Users by most edits\"\n                  pageLink=\"users-by-most-edits\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={UsersByMostEditsGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Most Active Users\"\n                  pageLink=\"most-active-users\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={MostActiveUsersGraphSettings}\n                    />\n                  }\n                />\n              </CardDeck>\n              <CardDeck className=\"deck\">\n                <GraphCard\n                  title=\"Most Active Pages\"\n                  pageLink=\"most-active-pages\"\n                  history={this.state.history}\n                  graph={\n                    <SimpleBarGraph\n                      fullGraph={false}\n                      settings={MostActivePagesGraphSettings}\n                    />\n                  }\n                />\n                <GraphCard\n                  title=\"Sample Graph: link to home\"\n                  pageLink=\"\"\n                  history={this.state.history}\n                  graph={<SampleGraph />}\n                />\n              </CardDeck>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HomePage\n","import React from 'react'\nimport { Route, Switch, BrowserRouter as Router } from 'react-router-dom'\nimport HomePage from './Pages/HomePage'\nimport history from './Utils/History'\nimport TestFeedData from './Examples/TestFeedData'\nimport TestPage from './Pages/TestPage'\nimport UsersByMostEditsPage from './Pages/UsersByMostEditsPage'\nimport MostActiveUsers from './Pages/MostActiveUsers'\nimport MostActivePages from './Pages/MostActivePages'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router history={history}>\n        <Switch>\n          <Route exact path=\"/\" component={HomePage} />\n          <Route exact path=\"/page\" component={TestPage} />\n          <Route\n            exact\n            path=\"/users-by-most-edits\"\n            component={UsersByMostEditsPage}\n          />\n          <Route exact path=\"/most-active-users\" component={MostActiveUsers} />\n          <Route exact path=\"/most-active-pages\" component={MostActivePages} />\n          <Route exact path=\"/feed\" component={TestFeedData} />\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}